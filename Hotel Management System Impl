package hotelmanagementsystem;

import payment.Payment;
import reservation.Reservation;
import reservation.ReservationStatus;
import room.Room;
import room.RoomStatus;

import java.time.LocalDate;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

public class HotelManagementSystemImpl implements HotelManagementSystem{
    private final Map<String, Room> rooms;
    private final Map<String, Guest> guests;
    private final Map<String, Reservation> reservations;
    private static HotelManagementSystemImpl instance;

    private HotelManagementSystemImpl(){
        rooms = new ConcurrentHashMap<>();
        guests = new ConcurrentHashMap<>();
        reservations = new ConcurrentHashMap<>();
    }

    public static HotelManagementSystemImpl getInstance(){
        if (instance==null){
            instance = new HotelManagementSystemImpl();
        }
        return instance;
    }

    @Override
    public void addRoom(Room room) {
        rooms.put(room.getNo(),room);
    }

    @Override
    public void addGuest(Guest guest) {
        guests.put(guest.id(),guest);
    }

    @Override
    public Reservation reserveRoom(Room room, Guest guest, LocalDate checkInDate, LocalDate checkoutDate) {
        if (isAvailable(room,checkInDate,checkoutDate)){
            Reservation reservation = new Reservation(generateId(),room,guest,checkInDate,checkoutDate);
            reservations.put(reservation.getId(),reservation);
            room.reserveRoom();
            System.out.println("Room "+room.getNo()+" Reserved");
            return reservation;
        }
        else{
            System.out.println("Room currently not available");
        }
        return null;
    }

    @Override
    public void cancelReservation(String reservedId) {
        Reservation reservation = reservations.get(reservedId);
        if (isReserved(reservation)){
            return;
        }

        if (reservation.getStatus()== ReservationStatus.CONFIRMED) {
            reservation.cancel();
            reservations.remove(reservedId);
            Room room = reservation.getRoom();
            room.cancelRoom();
            System.out.println("Reservation for " + reservation.getRoom().getNo() + " Cancelled");
        }
    }

    @Override
    public void checkIn(String reservationId) {
        Reservation reservation = reservations.get(reservationId);
        if (isReserved(reservation)) return;

        Room room = reservation.getRoom();
        if (room.getStatus()== RoomStatus.BOOKED) {
            room.checkIn();
            System.out.println("Checked in");
        }
    }

    @Override
    public void checkOut(String reservationId, Payment payment) {
        Reservation reservation = reservations.get(reservationId);
        if (isReserved(reservation)){
            return;
        }
        Room room = reservation.getRoom();
        if (room.getStatus()==RoomStatus.OCCUPIED) {
            System.out.println("Rent amount " + reservation.getRent());

            if (processPayment(payment, reservation)) {
                cancelReservation(reservationId);
                System.out.println("Checked out");
            }
        }
        else {
            System.out.println("Room not checked in");
        }
    }

    @Override
    public String generateId() {
        return UUID.randomUUID().toString().substring(0,8);
    }

    private boolean isAvailable(Room room,LocalDate startDate,LocalDate endDate){
        for (Reservation reservation : reservations.values()){
            if (reservation.getRoom().equals(room)){
                if (startDate.isBefore(reservation.getCheckOutDate()) && endDate.isAfter(reservation.getCheckInDate())){
                    return false;
                }
            }
        }
        return true;
    }

    private boolean processPayment(Payment payment,Reservation reservation){
        return payment.processPayment(reservation.getRent());
    }

    private boolean isReserved(Reservation reservation){
        if (reservation==null){
            System.out.println("Not reserved or incorrect reservation id");
            return true;
        }
        return false;
    }
}
